openapi: 3.1.0
info:
  title: API
  version: '1.0'
  contact:
    email: contact@braquage-royale.xyz
  description: Documentation of API of braquage-royale.
servers:
  - url: 'https://api.braquage-royale.xyz'
    description: Prod
paths:
  /games:
    post:
      summary: Start new game
      operationId: post-start
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      tags:
        - Games
      description: Start a new game
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
          application/xml:
            schema:
              type: object
              properties: {}
        description: ''
    parameters: []
    get:
      summary: Get All
      operationId: get-games
      responses:
        '200':
          description: OK
      tags:
        - Games
      description: Get a game
  '/games/{gameId}':
    parameters:
      - schema:
          type: string
        name: gameId
        in: path
        required: true
    get:
      summary: Get One
      tags:
        - Games
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '503':
          description: Service Unavailable
      operationId: get-ganes-gameId
      description: Get one game by Id
    patch:
      summary: Update
      operationId: patch-ganes-gameId
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '503':
          description: Service Unavailable
      tags:
        - Games
      description: Update one game by id
    delete:
      summary: Delete
      operationId: delete-ganes-gameId
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '503':
          description: Service Unavailable
      tags:
        - Games
      description: Delete one game by Id
  '/users/{userId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get One
      tags:
        - Users
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: ABC142
                    firstname: Alice
                    lastname: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
    patch:
      summary: Update
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples: {}
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples: {}
        description: Patch user properties to update.
      tags:
        - Users
      parameters: []
    delete:
      summary: Delete
      operationId: delete-users-userId
      responses:
        '200':
          description: OK
      tags:
        - Users
      description: Delete user by id
  /users:
    post:
      summary: Create
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples: {}
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples: {}
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
      tags:
        - Users
    get:
      summary: Get All
      operationId: get-user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      description: Get all users
      tags:
        - Users
    parameters: []
  /maps:
    get:
      summary: Get All
      tags:
        - Maps
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Map'
      operationId: get-maps
      description: Get All map
    post:
      summary: Create
      operationId: post-maps
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Map'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      tags:
        - Maps
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Map'
        description: ''
      description: Create a new map
  '/maps/{mapId}':
    parameters:
      - schema:
          type: string
        name: mapId
        in: path
        required: true
    get:
      summary: Get One
      tags:
        - Maps
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Map'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: get-maps-mapId
      description: Get one map by Id
    patch:
      summary: Update
      operationId: patch-maps-mapId
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Map'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Update one map by id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Map'
      tags:
        - Maps
    delete:
      summary: Delete
      operationId: delete-maps-mapId
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Delete one map by id
      tags:
        - Maps
  /characters:
    get:
      summary: Get All
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Character'
      operationId: get-characters
      description: Get all character of game
      tags:
        - Characters
    post:
      summary: Create
      operationId: post-characters
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      description: Create a new character
      tags:
        - Characters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Character'
        description: ''
  '/characters/{characterId}':
    parameters:
      - schema:
          type: string
        name: characterId
        in: path
        required: true
    get:
      summary: Get one
      tags:
        - Characters
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: get-characters-characterId
      description: Get one character by Id
    patch:
      summary: Update
      operationId: patch-characters-characterId
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Character'
      tags:
        - Characters
      description: Update one character by id
    delete:
      summary: Delete
      operationId: delete-characters-characterId
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Delete one character by Id
      tags:
        - Characters
components:
  schemas:
    Game:
      title: Game
      type: object
      examples: []
      x-tags:
        - Model
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date:
          type: object
          properties:
            created_at:
              format: date
              type: string
              readOnly: true
            updated_at:
              type: string
              format: date
            finished_at:
              type: string
              format: date
        name:
          type: string
        max_players:
          type: number
          maximum: 5
        is_private:
          type: boolean
        invit_code:
          type:
            - string
            - 'null'
        map_id:
          type: string
          format: uuid
        players:
          type:
            - array
            - 'null'
          items:
            type: object
            properties:
              user_id:
                type: string
                format: uuid
              vitality:
                type: number
                format: float
                default: 100
              attack:
                type: number
                format: float
                default: 10
              kills:
                type: number
                default: 0
              coordinates:
                type: object
                properties:
                  x:
                    type: number
                    format: float
                  'y':
                    type: number
                    format: float
              is_spectate:
                type: boolean
                default: false
              caracter_id:
                type: string
                format: uuid
            required:
              - user_id
              - is_spectate
              - caracter_id
        status:
          type: string
          default: ACTIVED
      required:
        - name
        - max_players
        - is_private
        - map_id
        - players
    User:
      title: User Model
      type: object
      description: ''
      examples:
        - id: string
          firstName: string
          lastName: string
          email: user@example.com
          player:
            username: string
            rank: string
            exp: 0
          status: string
          avatar: 'http://example.com'
          date:
            created_at: '1997-10-31'
            updated_at: '1997-10-31'
            date_of_birth: '1997-10-31'
      x-tags:
        - Model
      properties:
        id:
          type: string
          description: Unique identifier for the given user.
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
          format: email
        player:
          type: object
          properties:
            username:
              type: string
            rank:
              type: string
              readOnly: true
            exp:
              type: integer
              minimum: 0
              readOnly: true
          required:
            - username
        status:
          type: string
          readOnly: true
        avatar:
          type: string
          format: uri
        date:
          type: object
          properties:
            created_at:
              type: string
              format: date
              example: '1997-10-31'
              readOnly: true
            updated_at:
              type: string
              format: date
              example: '1997-10-31'
              readOnly: true
            date_of_birth:
              type: string
              format: date
              example: '1997-10-31'
          required:
            - date_of_birth
      required:
        - id
        - firstname
        - lastname
        - email
    Map:
      title: Map Model
      type: object
      x-tags:
        - Model
      description: ''
      examples: []
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date:
          type: object
          properties:
            created_at:
              type: string
              format: date
              readOnly: true
            updated_at:
              type: string
              format: date
        status:
          type: string
        vote:
          type: number
          format: float
          default: 0
          example: 4.55
          minimum: 0
          maximum: 5
        name:
          type: string
        description:
          type:
            - string
            - 'null'
        version:
          type: object
          properties:
            version_number:
              type: string
              default: 1.0.0
              example: 1.0.0
            files_url:
              type: string
      required:
        - id
        - name
    Character:
      title: Character
      type: object
      x-tags:
        - Model
      description: ''
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        url_image:
          type: string
          format: uri
  securitySchemes: {}
  responses: {}
  examples: {}
security: []
tags:
  - name: API
  - name: Characters
  - name: Games
  - name: Maps
  - name: Users
