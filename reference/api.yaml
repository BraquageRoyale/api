openapi: 3.1.0
info:
  title: api
  version: '1.0'
  contact:
    email: contact@braquage-royale.xyz
  description: Documentation of API of braquage-royale.
servers:
  - url: 'https://api.braquage-royale.xyz'
    description: Prod
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get One
      tags:
        - Users
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: ABC142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
    patch:
      summary: Update
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples: {}
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
      tags:
        - Users
      parameters: []
    delete:
      summary: Delete
      operationId: delete-users-userId
      responses:
        '200':
          description: OK
      tags:
        - Users
      description: Delete user by id
  /user:
    post:
      summary: Create
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: ABC142
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
      tags:
        - Users
    get:
      summary: Get All
      operationId: get-user
      responses:
        '200':
          description: OK
      description: Get all users
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
            examples: {}
        description: Array of User Object
components:
  schemas:
    User:
      title: User Model
      type: object
      description: ''
      examples:
        - id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: string
          description: Unique identifier for the given user.
          readOnly: true
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        player:
          type: object
          properties:
            username:
              type: string
            rank:
              type: string
              readOnly: true
            exp:
              type: integer
              minimum: 0
              readOnly: true
          required:
            - username
        status:
          type: string
          readOnly: true
        avatar:
          type: string
          format: uri
        date:
          type: object
          properties:
            created_at:
              type: string
              format: date
              example: '1997-10-31'
              readOnly: true
            updated_at:
              type: string
              format: date
              example: '1997-10-31'
              readOnly: true
            last_login:
              type: string
              example: '1997-10-31'
              format: date
              readOnly: true
            date_of_birth:
              type: string
              format: date
              example: '1997-10-31'
          required:
            - date_of_birth
      required:
        - id
        - firstName
        - lastName
        - email
      x-tags:
        - Model
    Game:
      title: Game
      type: object
      examples: []
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date:
          type: object
          required:
            - created_at
            - updated_at
          properties:
            created_at:
              format: date
              type: string
              readOnly: true
            updated_at:
              type: string
              format: date
            finished_at:
              type: string
              format: date
        name:
          type: string
        max_players:
          type: number
          maximum: 5
        is_private:
          type: boolean
        invit_code:
          type:
            - string
            - 'null'
        map_id:
          type: string
          format: uuid
        players:
          type:
            - array
            - 'null'
          items:
            type: object
            properties:
              user_id:
                type: string
                format: uuid
              vitality:
                type: number
                format: float
                default: 100
              attack:
                type: number
                format: float
                default: 10
              kills:
                type: number
                default: 0
              coordinates:
                type: object
                required:
                  - x
                  - 'y'
                properties:
                  x:
                    type: number
                    format: float
                  'y':
                    type: number
                    format: float
              is_spectate:
                type: boolean
                default: false
              caracter_id:
                type: string
                format: uuid
            required:
              - user_id
              - vitality
              - attack
              - kills
              - coordinates
              - is_spectate
        is_active:
          type: boolean
          default: true
      required:
        - id
        - date
        - name
        - max_players
        - is_private
        - map_id
        - players
        - is_active
  securitySchemes: {}
security: []
tags:
  - name: API
  - name: Users
